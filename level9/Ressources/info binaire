
(gdb) info functions
All defined functions:

Non-debugging symbols:
0x08048464  _init
0x080484b0  __cxa_atexit
0x080484b0  __cxa_atexit@plt
0x080484c0  __gmon_start__
0x080484c0  __gmon_start__@plt
0x080484d0  std::ios_base::Init::Init()
0x080484d0  _ZNSt8ios_base4InitC1Ev@plt
0x080484e0  __libc_start_main
0x080484e0  __libc_start_main@plt
0x080484f0  _exit
0x080484f0  _exit@plt
0x08048500  _ZNSt8ios_base4InitD1Ev
0x08048500  _ZNSt8ios_base4InitD1Ev@plt
0x08048510  memcpy
0x08048510  memcpy@plt
0x08048520  strlen
0x08048520  strlen@plt
0x08048530  operator new(unsigned int)
0x08048530  _Znwj@plt
0x08048540  _start
0x08048570  __do_global_dtors_aux
0x080485d0  frame_dummy
0x080485f4  main
0x0804869a  __static_initialization_and_destruction_0(int, int)
0x080486da  _GLOBAL__sub_I_main
0x080486f6  N::N(int)
0x080486f6  N::N(int)
0x0804870e  N::setAnnotation(char*)
0x0804873a  N::operator+(N&)
0x0804874e  N::operator-(N&)
0x08048770  __libc_csu_init
0x080487e0  __libc_csu_fini
0x080487e2  __i686.get_pc_thunk.bx
0x080487f0  __do_global_ctors_aux
0x0804881c  _fini
(gdb)

(gdb) disas  main
Dump of assembler code for function main:
   0x080485f4 <+0>:	push   ebp
   0x080485f5 <+1>:	mov    ebp,esp
   0x080485f7 <+3>:	push   ebx
   0x080485f8 <+4>:	and    esp,0xfffffff0
   0x080485fb <+7>:	sub    esp,0x20
   
   0x080485fe <+10>:	cmp    DWORD PTR [ebp+0x8],0x1					- if argc <= 1
   0x08048602 <+14>:	jg     0x8048610 <main+28>
   0x08048604 <+16>:	mov    DWORD PTR [esp],0x1
   0x0804860b <+23>:	call   0x80484f0 <_exit@plt>

   0x08048610 <+28>:	mov    DWORD PTR [esp],0x6c						- 108 dans esp, argument du new
   0x08048617 <+35>:	call   0x8048530 <_Znwj@plt>					- operator new(unsigned int)
   0x0804861c <+40>:	mov    ebx,eax									- n1 = new(108)
   
   0x0804861e <+42>:	mov    DWORD PTR [esp+0x4],0x5					- argument 2 >> 5
   0x08048626 <+50>:	mov    DWORD PTR [esp],ebx						- argument 1 >> class N
   0x08048629 <+53>:	call   0x80486f6 <_ZN1NC2Ei>					- constructor N(int n)
   0x0804862e <+58>:	mov    DWORD PTR [esp+0x1c],ebx					- n1 = new N(5)	

   0x08048632 <+62>:	mov    DWORD PTR [esp],0x6c						- 108 dans esp, argument du new
   0x08048639 <+69>:	call   0x8048530 <_Znwj@plt>					- operator new(unsigned int)
   0x0804863e <+74>:	mov    ebx,eax									- n2 = new(108)
   
   0x08048640 <+76>:	mov    DWORD PTR [esp+0x4],0x6					- argument 2 >> 6
   0x08048648 <+84>:	mov    DWORD PTR [esp],ebx						- argument 1 >> class N
   0x0804864b <+87>:	call   0x80486f6 <_ZN1NC2Ei>					- constructor N(int n)
   0x08048650 <+92>:	mov    DWORD PTR [esp+0x18],ebx
   
   0x08048654 <+96>:	mov    eax,DWORD PTR [esp+0x1c]
   0x08048658 <+100>:	mov    DWORD PTR [esp+0x14],eax
   0x0804865c <+104>:	mov    eax,DWORD PTR [esp+0x18]
   0x08048660 <+108>:	mov    DWORD PTR [esp+0x10],eax

   0x08048664 <+112>:	mov    eax,DWORD PTR [ebp+0xc]
   0x08048667 <+115>:	add    eax,0x4
   0x0804866a <+118>:	mov    eax,DWORD PTR [eax]

   0x0804866c <+120>:	mov    DWORD PTR [esp+0x4],eax
   0x08048670 <+124>:	mov    eax,DWORD PTR [esp+0x14]
   0x08048674 <+128>:	mov    DWORD PTR [esp],eax
   0x08048677 <+131>:	call   0x804870e <_ZN1N13setAnnotationEPc>		- N->setAnnotation(char *str)

   0x0804867c <+136>:	mov    eax,DWORD PTR [esp+0x10]
   0x08048680 <+140>:	mov    eax,DWORD PTR [eax]
   0x08048682 <+142>:	mov    edx,DWORD PTR [eax]

   0x08048684 <+144>:	mov    eax,DWORD PTR [esp+0x14]
   0x08048688 <+148>:	mov    DWORD PTR [esp+0x4],eax
   0x0804868c <+152>:	mov    eax,DWORD PTR [esp+0x10]
   0x08048690 <+156>:	mov    DWORD PTR [esp],eax
   0x08048693 <+159>:	call   edx
   0x08048695 <+161>:	mov    ebx,DWORD PTR [ebp-0x4]

   0x08048698 <+164>:	leave
   0x08048699 <+165>:	ret
End of assembler dump.

You can use c++filt to decipher individual symbols
$ c++filt _Znwj
operator new(unsigned int)

****** La classe N a 3 fonctions et un constructor ******
	- N::N(int) >> constructor >> _ZN1NC2Ei
	- N::setAnnotation(char*) >> _ZN1N13setAnnotationEPc 
	- N::operator+(N&)
	- N::operator-(N&)

$ objdump -M intel -d level9

080486f6 <_ZN1NC1Ei>:
 80486f6:	55                   	push   ebp
 80486f7:	89 e5                	mov    ebp,esp
 80486f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 80486fc:	c7 00 48 88 04 08    	mov    DWORD PTR [eax],0x8048848
 8048702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 8048705:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
 8048708:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
 804870b:	5d                   	pop    ebp
 804870c:	c3                   	ret
 804870d:	90                   	nop

0804870e <_ZN1N13setAnnotationEPc>:
 804870e:	55                   	push   ebp
 804870f:	89 e5                	mov    ebp,esp
 8048711:	83 ec 18             	sub    esp,0x18
 8048714:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 8048717:	89 04 24             	mov    DWORD PTR [esp],eax
 804871a:	e8 01 fe ff ff       	call   8048520 <strlen@plt>
 804871f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
 8048722:	83 c2 04             	add    edx,0x4
 8048725:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 8048729:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 804872c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 8048730:	89 14 24             	mov    DWORD PTR [esp],edx
 8048733:	e8 d8 fd ff ff       	call   8048510 <memcpy@plt>
 8048738:	c9                   	leave
 8048739:	c3                   	ret

0804873a <_ZN1NplERS_>:
 804873a:	55                   	push   ebp
 804873b:	89 e5                	mov    ebp,esp
 804873d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 8048740:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
 8048743:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 8048746:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
 8048749:	01 d0                	add    eax,edx
 804874b:	5d                   	pop    ebp
 804874c:	c3                   	ret
 804874d:	90                   	nop

0804874e <_ZN1NmiERS_>:
 804874e:	55                   	push   ebp
 804874f:	89 e5                	mov    ebp,esp
 8048751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 8048754:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
 8048757:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 804875a:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
 804875d:	89 d1                	mov    ecx,edx
 804875f:	29 c1                	sub    ecx,eax
 8048761:	89 c8                	mov    eax,ecx
 8048763:	5d                   	pop    ebp
 8048764:	c3                   	ret
 8048765:	90                   	nop
 8048766:	90                   	nop
 8048767:	90                   	nop
 8048768:	90                   	nop
 8048769:	90                   	nop
 804876a:	90                   	nop
 804876b:	90                   	nop
 804876c:	90                   	nop
 804876d:	90                   	nop
 804876e:	90                   	nop
 804876f:	90                   	nop

$ c++filt _ZN1NmiERS_
N::operator-(N&)

$ c++filt _ZN1NplERS_
N::operator+(N&)

Donc la classe N ressemblera Ã :

class N {
	public:

	N(int n) {}

	setAnnotation(char *str) {
		memcpy(dst, src, strlen(str))
	}
	operator+(N&) {}
	operator-(N&) {}

}

